// Generated by delombok at Mon Jun 09 12:47:31 EDT 2025
package studio.magemonkey.fabled.shield;

import lombok.*;
import org.bukkit.ChatColor;
import org.bukkit.Keyed;
import org.bukkit.boss.BarColor;
import org.bukkit.boss.BarStyle;
import org.bukkit.boss.BossBar;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitTask;
import studio.magemonkey.codex.util.MsgUT;

public class ShieldEffect {
    private final String name;
    private final String classifier;
    private final double amount;
    private double percent = 1;
    private ShieldDisplay displayLocation = ShieldDisplay.ACTION_BAR;
    private double taken;
    private BossBar bossBar;
    private BarColor barColor = BarColor.GREEN;
    private BarStyle barStyle = BarStyle.SOLID;
    private Keyed hitSound;
    private Keyed breakSound;
    private BukkitTask task;

    public ShieldEffect(String name, String classifier, double amount, double percent) {
        this(name, classifier, amount);
        this.percent = percent;
    }

    public void destroy() {
        if (bossBar != null) {
            bossBar.removeAll();
            bossBar = null;
        }
        if (task != null) {
            task.cancel();
            task = null;
        }
    }

    /**
     * Breaks the shield effect, removing it from the entity.
     * This calls a {@link FabledShieldBreakEvent}
     * Also, optionally plays a sound to the player.
     *
     * @param entity the entity to break the shield for
     */
    public void breakShield(LivingEntity entity) {
        if (breakSound != null && entity instanceof Player) {
            ((Player) entity).playSound(entity.getLocation(), breakSound.getKey().getKey(), 1, 1);
        }
        // Call the event
        FabledShieldBreakEvent event = new FabledShieldBreakEvent(entity, this);
        entity.getServer().getPluginManager().callEvent(event);
        destroy();
    }

    /**
     * Applies damage to the shield effect, first reducing the damage by the percent value.
     * If the shield does not absorb all the damage, the remaining damage is returned.
     *
     * @param entity the entity to play the hit sound to
     * @param amount the amount of damage to apply
     * @return the remaining damage that was not absorbed by the shield
     */
    public double damage(LivingEntity entity, double amount) {
        double modified = amount * percent;
        modified = Math.min(modified, getRemaining());
        taken += modified;
        if (isExhausted()) breakShield(entity);
         else {
            // Play hit sound
            if (hitSound != null && entity instanceof Player) {
                ((Player) entity).playSound(entity.getLocation(), hitSound.getKey().getKey(), 1, 1);
            }
        }
        FabledShieldDamageEvent event = new FabledShieldDamageEvent(entity, this, modified);
        entity.getServer().getPluginManager().callEvent(event);
        return amount - modified;
    }

    public double damageAndDisplay(double amount, LivingEntity entity) {
        double remaining = damage(entity, amount);
        if (entity instanceof Player) display((Player) entity);
        return remaining;
    }

    public double getRemaining() {
        return amount - taken;
    }

    public boolean isExhausted() {
        return taken >= amount;
    }

    /**
     * Displays the shield effect to the player.
     * @param player the player to display shields to
     */
    public void display(Player player) {
        switch (displayLocation) {
        case ACTION_BAR: 
            displayActionBar(player);
            break;
        case BOSS_BAR: 
            // Don't show the boss bar if exhausted because
            // we want it to actually be removed
            if (isExhausted()) return;
            displayBossBar(player);
            break;
        case TITLE: 
            displayTitle(player);
            break;
        case CHAT: 
        default: 
            displayChat(player);
            break;
        }
    }

    private void displayChat(Player player) {
        player.sendMessage(name + ": " + getFormattedShieldString());
    }

    private void displayActionBar(Player player) {
        MsgUT.sendActionBar(player, name + ": " + getFormattedShieldString());
    }

    private void displayTitle(Player player) {
        MsgUT.sendTitles(player, getFormattedShieldString(), name, 0, 20, 0);
    }

    private void displayBossBar(Player player) {
        if (bossBar == null) {
            bossBar = player.getServer().createBossBar(name, barColor, barStyle);
        }
        bossBar.setProgress(getRemaining() / amount);
        if (!bossBar.getPlayers().contains(player)) bossBar.addPlayer(player);
    }

    private String getFormattedShieldString() {
        // We'll use 10 blocks, each representing 10% of the shield.
        // Each block will be colored based on the percentage of the shield used.
        // For example, if 15% is used, the first block will be red, the second will be yellow,
        // and the rest will be green.
        double percentUsed = taken / amount;
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            if (percentUsed * 10 - i >= 1) {
                builder.append(ChatColor.RED);
            } else if (percentUsed * 10 - i >= 0.5) {
                builder.append(ChatColor.YELLOW);
            } else {
                builder.append(ChatColor.GREEN);
            }
            builder.append("â–ˆ");
        }
        return builder.toString();
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getName() {
        return this.name;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public String getClassifier() {
        return this.classifier;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public double getAmount() {
        return this.amount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public double getPercent() {
        return this.percent;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ShieldDisplay getDisplayLocation() {
        return this.displayLocation;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public double getTaken() {
        return this.taken;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BarColor getBarColor() {
        return this.barColor;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BarStyle getBarStyle() {
        return this.barStyle;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Keyed getHitSound() {
        return this.hitSound;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public Keyed getBreakSound() {
        return this.breakSound;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public BukkitTask getTask() {
        return this.task;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setPercent(final double percent) {
        this.percent = percent;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setDisplayLocation(final ShieldDisplay displayLocation) {
        this.displayLocation = displayLocation;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTaken(final double taken) {
        this.taken = taken;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setBarColor(final BarColor barColor) {
        this.barColor = barColor;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setBarStyle(final BarStyle barStyle) {
        this.barStyle = barStyle;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setHitSound(final Keyed hitSound) {
        this.hitSound = hitSound;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setBreakSound(final Keyed breakSound) {
        this.breakSound = breakSound;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public void setTask(final BukkitTask task) {
        this.task = task;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof ShieldEffect)) return false;
        final ShieldEffect other = (ShieldEffect) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (java.lang.Double.compare(this.getAmount(), other.getAmount()) != 0) return false;
        if (java.lang.Double.compare(this.getPercent(), other.getPercent()) != 0) return false;
        if (java.lang.Double.compare(this.getTaken(), other.getTaken()) != 0) return false;
        final java.lang.Object this$name = this.getName();
        final java.lang.Object other$name = other.getName();
        if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
        final java.lang.Object this$classifier = this.getClassifier();
        final java.lang.Object other$classifier = other.getClassifier();
        if (this$classifier == null ? other$classifier != null : !this$classifier.equals(other$classifier)) return false;
        final java.lang.Object this$displayLocation = this.getDisplayLocation();
        final java.lang.Object other$displayLocation = other.getDisplayLocation();
        if (this$displayLocation == null ? other$displayLocation != null : !this$displayLocation.equals(other$displayLocation)) return false;
        final java.lang.Object this$bossBar = this.getBossBar();
        final java.lang.Object other$bossBar = other.getBossBar();
        if (this$bossBar == null ? other$bossBar != null : !this$bossBar.equals(other$bossBar)) return false;
        final java.lang.Object this$barColor = this.getBarColor();
        final java.lang.Object other$barColor = other.getBarColor();
        if (this$barColor == null ? other$barColor != null : !this$barColor.equals(other$barColor)) return false;
        final java.lang.Object this$barStyle = this.getBarStyle();
        final java.lang.Object other$barStyle = other.getBarStyle();
        if (this$barStyle == null ? other$barStyle != null : !this$barStyle.equals(other$barStyle)) return false;
        final java.lang.Object this$hitSound = this.getHitSound();
        final java.lang.Object other$hitSound = other.getHitSound();
        if (this$hitSound == null ? other$hitSound != null : !this$hitSound.equals(other$hitSound)) return false;
        final java.lang.Object this$breakSound = this.getBreakSound();
        final java.lang.Object other$breakSound = other.getBreakSound();
        if (this$breakSound == null ? other$breakSound != null : !this$breakSound.equals(other$breakSound)) return false;
        final java.lang.Object this$task = this.getTask();
        final java.lang.Object other$task = other.getTask();
        if (this$task == null ? other$task != null : !this$task.equals(other$task)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof ShieldEffect;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final long $amount = java.lang.Double.doubleToLongBits(this.getAmount());
        result = result * PRIME + (int) ($amount >>> 32 ^ $amount);
        final long $percent = java.lang.Double.doubleToLongBits(this.getPercent());
        result = result * PRIME + (int) ($percent >>> 32 ^ $percent);
        final long $taken = java.lang.Double.doubleToLongBits(this.getTaken());
        result = result * PRIME + (int) ($taken >>> 32 ^ $taken);
        final java.lang.Object $name = this.getName();
        result = result * PRIME + ($name == null ? 43 : $name.hashCode());
        final java.lang.Object $classifier = this.getClassifier();
        result = result * PRIME + ($classifier == null ? 43 : $classifier.hashCode());
        final java.lang.Object $displayLocation = this.getDisplayLocation();
        result = result * PRIME + ($displayLocation == null ? 43 : $displayLocation.hashCode());
        final java.lang.Object $bossBar = this.getBossBar();
        result = result * PRIME + ($bossBar == null ? 43 : $bossBar.hashCode());
        final java.lang.Object $barColor = this.getBarColor();
        result = result * PRIME + ($barColor == null ? 43 : $barColor.hashCode());
        final java.lang.Object $barStyle = this.getBarStyle();
        result = result * PRIME + ($barStyle == null ? 43 : $barStyle.hashCode());
        final java.lang.Object $hitSound = this.getHitSound();
        result = result * PRIME + ($hitSound == null ? 43 : $hitSound.hashCode());
        final java.lang.Object $breakSound = this.getBreakSound();
        result = result * PRIME + ($breakSound == null ? 43 : $breakSound.hashCode());
        final java.lang.Object $task = this.getTask();
        result = result * PRIME + ($task == null ? 43 : $task.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "ShieldEffect(name=" + this.getName() + ", classifier=" + this.getClassifier() + ", amount=" + this.getAmount() + ", percent=" + this.getPercent() + ", displayLocation=" + this.getDisplayLocation() + ", taken=" + this.getTaken() + ", bossBar=" + this.getBossBar() + ", barColor=" + this.getBarColor() + ", barStyle=" + this.getBarStyle() + ", hitSound=" + this.getHitSound() + ", breakSound=" + this.getBreakSound() + ", task=" + this.getTask() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ShieldEffect(final String name, final String classifier, final double amount) {
        this.name = name;
        this.classifier = classifier;
        this.amount = amount;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private BossBar getBossBar() {
        return this.bossBar;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private void setBossBar(final BossBar bossBar) {
        this.bossBar = bossBar;
    }
}
